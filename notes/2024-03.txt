================
      2024-03-27
================

----------------
bevy experiments
----------------
+ pass arguments in entity spawn commands, eg bullet direction and speed
+ bullets are now sprites instead of mesh boxes
+ tilemap uses new room asset system
+ player can interact with areas on the map and trigger actions
+ hot reload tilemaps
! entities are not all despawned moving backfrom game to main menu
- started working on a level script system
  - level scripts are loaded with entities etc and associated with a key
  - simple "block" scripting of actions, simple action chaining
  - every block has a "chain" slot, which may either be another action string, or nothing
  - "fork" block to split execution
  - test blocks that only chains if a condition is met
- need to support some generic key/value store system
  - 2 scopes, global and local (room). local for things like if a door has been unlocked.
    global for bigger state like progression (maybe?)
- levels should be loaded and saved from RON, or maybe RON+tiled CSV(/b64). unclear, depends on
  what ingame editor i build

================
      2024-03-26
================

----------------
bevy experiments
----------------
+ added main menu, rendering bitmap text, cursor
  - some issue with mesh-based rendering, maybe a driver issue? some flicker.
    appears in desktop and wasm builds, need to test on more HW
+ reworked asset/room loading. entities now spawned centrally. structs for
  entity spawn commands, with a mind to serialize them so that entity/level defs
  can be assets rather than code.
- renamed this project to ROBOSHOOT as a working title. real name TBA


================
      2024-03-25
================

--------
simpleVM
--------
+ add memory device that calls JS code on read/write
  + re-implement html canvas screen using this, no longer relies on reading fixed
    memory address in VM
+ add memory device that maps to a Vec<u8>. map the program into memory directly
  instead of copying when running VM binary.


================
      2024-03-24
================

--------
simpleVM
--------
+ virtual memory, you now map things into a virtual memory space


================
      2024-03-21
================

----------------
bevy experiments
----------------
+ added game states, moving between a main menu splash screen and game state
  - added a system to cleanup all entities tagged as being part of game or main menu.
    this adds overhead to spawning entities but seems sensible? 
+ custom asset loader for getting tilemaps from CSV... but it doens't work
  - code seems ok, all the paths are getting exercised. even though the asset seems
    to load the AssetServer never returns it with the appropriate handle

================
      2024-03-20
================

--------
simpleVM
--------
+ Tidied up the preprocessor, it's now possible to write more meaningful programs
  in assembly. Still not _nice_, but doable.
+ Many small improvements to the WASM/browser harness to help me visualize what
  is going on in the machine. This helped me track down a few issues with 
  generating labels, as I could watch the PC move every VM tick.
+ Added a test display (memory mapped framebuffer) to the WASM/web VM build.
  Wrote a small fun colourful program: kJEBoQDEHrCzEMBmAbAhFpJAMkAQsFQ2MTASJgbg8JDwEg==
- Huge documentation cleanup, wow
- Next step is to write a higher level assembler, which doesn't expose as much of
  the jank of the ISA. Things like loading a 16bit constant in 1 instruction, instead 
  of:
  
  Imm A $fff
  ShiftLeft A A 4
  AddImm A $f

  It would be nice to just have something like: Imm A, $ffff


================
      2024-03-18
================

--------
simpleVM
--------
+ finished improved ISA
+ example of running in the browser/WASM build
+ rather than wrapping everything in wasm_bindgen everywhere, I made a VM struct that 
  wraps the existing VM type and exposes a different API. Eg, reigsters are accepted as
  strings rather than some enum, as I don't know how this plays with JS.


================
      2024-03-15
================

back from music festival, back to hacking on random projects.
in Feb i spent time playing with Bevy, but i haven't been confident
enough to show anything off yet. soon!

i did some programming in Adelaide last week, so yesterday and today
has been consolidating that and cleaning up the mess i made coding on
a plane.

--------
simpleVM
--------
+ generated instruction encoding/decoding now works on instruction
  components (eg Nibble, Register) rather than the entire instruction.
  this is due to there being more instruction formats now. it isn't as good
  as it was before, but it's a huge space saver over all of the duplication
  writing this logic myself. it is messy and prone to breaking, but hopefully
  this macro stuff will Just Work for a while as i flesh out remaining instructions
+ removed Flags register in favor of a Zero register, which is always Zero and cannot
  be assigned to. Flags will come back, maybe not as a register
- considering adding more registers. SP, BP, M and PC are good special purpose registers,
  but maybe having variants of certain instructions (eg Add) that could operate on 4 other
  general registers would be better.

  So Add could target: Zero, A, B, C, M, SP, BP, PC
  but AddX could target: Zero, A, B, C, X, Y, Z, W

  This might be useful for doing stuff, but makes some annoying rules for a higher level
  language (eg you can jump to address in register A, but not X/Y/Z/W)
  (where jump-to-address-in-register <=> Add A Zero PC aka PC = A + Zero)



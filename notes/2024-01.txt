================
      2024-01-22
================

----------
archeology
----------
- dug out old C/SDL2 code and updated them to build for Linux
- for some reason i wrote my own object system in C? it was very cumbersome
- sources and original win32 binaries (that Just Work tm in wine) are preserved here:
http://coding.tommarks.xyz/project/archive/little_men.tar.gz
http://coding.tommarks.xyz/project/archive/shark_game.tar.gz
- overall thoughts on the code: messy, but consistent. struggled with good
  data models to represent the state of the world. allocation was dumb.
  but it mostly WORKED and that is what is important. i forgot how long i spent
  on this code back in 2016!

================
      2024-01-19
================

--------
simpleVM
--------
+ macros generate instruction encoding based on types in enum variant
  - eg: `AddRegister(Register, Register)` - knows to encode 2 registers,
    `Push(u8)` knows to encode 1 literal. these are all very rigid, and
    unknown types in an instruction will blow up spectacularly.
- derive macro errors in compiler are surfaced strangely. i should get tests for this
- PR from BenMcAvoy: https://github.com/phy1um/rust-simple-vm/pull/1
  improves my style. was planning on doing this on a stream but it's very good :D
- had to cut stream eary due to nausea, so decoding is WIP until next stream
  - but this will follow the same principal


================
      2024-01-16
================

--------
simpleVM
--------
+ macros generate tedious Opcode from-string and to-u8
  - this is much less error prone than trying to do it by hand!
  - canonical opcode string representation is now 100% just enum variant name
- working with rust macros is easier once you embrace the `quote!` DSL
  - syn docs are pretty good but don't mess with the types by hand too much
  - rust docs aren't very noisy when a type is part of a feature - this wasted time
    in my stream!!
- once i generate instruction encoding and decoding in macros, the opcodes will basically
  be an internal detail and could be factored out


================
      2024-01-14
================

--------
simpleVM
--------
+ assembler uses instruction names
- adding new instructions is cumbersome and error prone
  - feels like macros would solve this :'D



================
      2024-01-09
================

-----------
discord bot
-----------
- removed janky event/annotation system, at the cost of manual work
- for some reason it dies after a while
- i'm not convinced the config hierarchy is a good idea but we'll roll with it for now
- need some kind of cache for certain api calls
- maybe need some higher level methods on the API
- conclusion: still not able to serve my needs yet


================
      2024-01-07
================

--------
simpleVM
--------
+ wrote basic "assembler"
+ VM loads binaries from file
+ implement SIGNAL instruction for handling extra events (like halting machine)
+ build first pass of "assembler" to turn a file containing bytes eg `04 AF` into
  a binary file with those values
- rewrite some Option/Result code to use `.ok_or` which is amazing


================
      2024-01-04
================

--------
simpleVM
--------
- 16-bit virtual machine in rust
+ made a working VM that can add numbers from stack
- code written as library, extra binaries defined in Cargo.toml to share
- very simple code so far, no lifetimes?
- opcode enum is messy, maybe i'm looking for too much magic
  - i have an Instruction type that has an op PLUS the data it operates on
  - eg `AddRegisters(register1, register2)`
  - this is nice because when we implement the logic for each instruction we don't
    have to think about decoding bits.
  - however using this enum to decode opcodes is SO messy
  - also it means that reordering the enum is an ABI change? this is bad
  - solution: eventually write a bit map from u8 -> Opcode, then match Opcode -> Instruction

